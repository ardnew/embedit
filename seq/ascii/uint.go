package ascii

import (
	"bytes"
	"io"
)

const host32bit = ^uint(0)>>32 == 0

type Uint32 struct {
	buf [10]byte
	Val uint32
}

// WriteTo writes the decimal string representation of u to w.
func (p *Uint32) WriteTo(w io.Writer) (n int64, err error) {
	u := p.Val
	switch { // Fast paths for small integers
	case u < 10:
		_, err = w.Write(digit[u : u+1])
		return 1, err
	case u < lutMax:
		i, err := w.Write(lut[u*2 : u*2+2])
		return int64(i), err
	}
	// var a [10]byte // Maximum length of 32-bit decimal
	for i := range p.buf {
		p.buf[i] = 0
	}
	i := len(p.buf)
	if host32bit {
		// Convert the lower digits using 32-bit operations
		for ; u >= 1e9; u /= 1e9 {
			r := u % 1e9
			for j := 4; j > 0; j-- {
				v := r % 100 * 2
				r /= 100
				i -= 2
				p.buf[i+1] = lut[v+1]
				p.buf[i+0] = lut[v+0]
			}
			i--
			p.buf[i] = lut[r*2+1]
		}
	}
	for u >= 100 {
		v := u % 100 * 2
		u /= 100
		i -= 2
		p.buf[i+1] = lut[v+1]
		p.buf[i+0] = lut[v+0]
	}
	u *= 2
	i--
	p.buf[i] = lut[u+1]
	if u >= 20 {
		i--
		p.buf[i] = lut[u]
	}
	nw, errw := bytes.NewBuffer(p.buf[i:]).WriteTo(w)
	return int64(nw), errw
}

const lutMax = 100

var lut = []byte{
	// ---------------------------------------------- 00..09
	'0', '0', '0', '1', '0', '2', '0', '3', '0', '4',
	'0', '5', '0', '6', '0', '7', '0', '8', '0', '9',
	// ---------------------------------------------- 10..19
	'1', '0', '1', '1', '1', '2', '1', '3', '1', '4',
	'1', '5', '1', '6', '1', '7', '1', '8', '1', '9',
	// ---------------------------------------------- 20..29
	'2', '0', '2', '1', '2', '2', '2', '3', '2', '4',
	'2', '5', '2', '6', '2', '7', '2', '8', '2', '9',
	// ---------------------------------------------- 30..39
	'3', '0', '3', '1', '3', '2', '3', '3', '3', '4',
	'3', '5', '3', '6', '3', '7', '3', '8', '3', '9',
	// ---------------------------------------------- 40..49
	'4', '0', '4', '1', '4', '2', '4', '3', '4', '4',
	'4', '5', '4', '6', '4', '7', '4', '8', '4', '9',
	// ---------------------------------------------- 50..59
	'5', '0', '5', '1', '5', '2', '5', '3', '5', '4',
	'5', '5', '5', '6', '5', '7', '5', '8', '5', '9',
	// ---------------------------------------------- 60..69
	'6', '0', '6', '1', '6', '2', '6', '3', '6', '4',
	'6', '5', '6', '6', '6', '7', '6', '8', '6', '9',
	// ---------------------------------------------- 70..79
	'7', '0', '7', '1', '7', '2', '7', '3', '7', '4',
	'7', '5', '7', '6', '7', '7', '7', '8', '7', '9',
	// ---------------------------------------------- 80..89
	'8', '0', '8', '1', '8', '2', '8', '3', '8', '4',
	'8', '5', '8', '6', '8', '7', '8', '8', '8', '9',
	// ---------------------------------------------- 90..99
	'9', '0', '9', '1', '9', '2', '9', '3', '9', '4',
	'9', '5', '9', '6', '9', '7', '9', '8', '9', '9',
}

var digit = []byte{
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
}
